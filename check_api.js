#!/usr/bin/env node

/**
 * API Health Check Script
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ API
 */

const https = require('http');

const API_BASE = 'http://45.144.28.25:5435';
const API_PREFIX = '/api';

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞:', API_BASE);
console.log('========================================');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(method, endpoint, data = null, headers = {}) {
  return new Promise((resolve, reject) => {
    const url = new URL(API_BASE + API_PREFIX + endpoint);
    const options = {
      hostname: url.hostname,
      port: url.port,
      path: url.pathname + url.search,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        ...headers,
      },
    };

    const req = https.request(options, res => {
      let body = '';
      res.on('data', chunk => {
        body += chunk;
      });
      res.on('end', () => {
        resolve({
          status: res.statusCode,
          body: body,
          headers: res.headers,
        });
      });
    });

    req.on('error', err => {
      reject(err);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
async function checkEndpoint(method, endpoint, description, data = null, headers = {}) {
  try {
    console.log(`üì° ${description} (${method} ${endpoint}):`);
    const response = await makeRequest(method, endpoint, data, headers);

    if (response.status >= 200 && response.status < 300) {
      console.log(`   ‚úÖ OK (${response.status})`);
    } else if (response.status === 401) {
      console.log(`   üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (${response.status})`);
    } else if (response.status === 404) {
      console.log(`   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω (${response.status})`);
    } else if (response.status >= 500) {
      console.log(`   üí• –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (${response.status})`);
      console.log(`   –û—Ç–≤–µ—Ç: ${response.body}`);
    } else {
      console.log(`   ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ (${response.status})`);
    }
    console.log('');
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
    console.log('');
  }
}

async function main() {
  console.log('\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤:\n');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  await checkEndpoint('GET', '/', '–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  await checkEndpoint('GET', '/auth/me', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  await checkEndpoint('POST', '/auth/login', '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É', {
    username: 'test',
    password: 'test',
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
  await checkEndpoint('GET', '/routes/user', '–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≥–µ–Ω—Ç–∞
  await checkEndpoint('POST', '/agent/chat', '–ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–æ–º', {
    message: 'test',
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç
  await checkEndpoint('GET', '/places/search?q=test', '–ü–æ–∏—Å–∫ –º–µ—Å—Ç');

  console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π:');
  console.log('1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
  console.log('2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞');
  console.log('3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ: Authorization: Bearer <token>');
  console.log('\nüîó Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:', API_BASE + '/docs');
  console.log('üìÑ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è:', API_BASE + '/openapi.json');
}

main().catch(console.error);
