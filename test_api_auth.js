#!/usr/bin/env node

/**
 * API Testing Script with Authentication
 * –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
 */

const https = require('http');

const API_BASE = 'http://45.144.28.25:5435';
const API_PREFIX = '/api';

console.log('üîê –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π');
console.log('========================================');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(method, endpoint, data = null, headers = {}) {
  return new Promise((resolve, reject) => {
    const url = new URL(API_BASE + API_PREFIX + endpoint);
    const options = {
      hostname: url.hostname,
      port: url.port,
      path: url.pathname + url.search,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        ...headers,
      },
    };

    const req = https.request(options, res => {
      let body = '';
      res.on('data', chunk => {
        body += chunk;
      });
      res.on('end', () => {
        resolve({
          status: res.statusCode,
          body: body,
          headers: res.headers,
        });
      });
    });

    req.on('error', err => {
      reject(err);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    req.end();
  });
}

async function testAPI() {
  let accessToken = null;

  try {
    console.log('\n1Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const testEmail = 'test_api_' + Date.now() + '@example.com';
    const registerResponse = await makeRequest('POST', '/auth/register', {
      email: testEmail,
      password: 'test123456',
      full_name: 'Test API User',
    });

    if (registerResponse.status === 200 || registerResponse.status === 201) {
      console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    } else {
      console.log('‚ö†Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:', registerResponse.body);
    }

    console.log('\n2Ô∏è‚É£ –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...');
    const loginResponse = await makeRequest('POST', '/auth/login', {
      email: testEmail,
      password: 'test123456',
    });

    if (loginResponse.status === 200) {
      const loginData = JSON.parse(loginResponse.body);
      accessToken = loginData.access_token;
      console.log('‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω');
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', loginResponse.body);
      return;
    }

    const authHeaders = {
      Authorization: `Bearer ${accessToken}`,
    };

    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    const meResponse = await makeRequest('GET', '/auth/me', null, authHeaders);
    if (meResponse.status === 200) {
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', meResponse.body);
    }

    console.log('\n4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤...');
    const routesResponse = await makeRequest('GET', '/routes/user', null, authHeaders);
    if (routesResponse.status === 200) {
      console.log('‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã');
    } else {
      console.log('‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç—ã:', routesResponse.body);
    }

    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç —á–∞—Ç–∞ —Å –∞–≥–µ–Ω—Ç–æ–º...');
    const chatResponse = await makeRequest(
      'POST',
      '/agent/message',
      {
        message: '–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –æ –ú–æ—Å–∫–≤–µ',
      },
      authHeaders,
    );

    if (chatResponse.status === 200) {
      console.log('‚úÖ –ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
      console.log('‚ö†Ô∏è –ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–æ–º:', chatResponse.body);
    }

    console.log('\n6Ô∏è‚É£ –ü–æ–∏—Å–∫ –º–µ—Å—Ç...');
    const placesResponse = await makeRequest('GET', '/places?q=–∫—Ä–∞—Å–Ω–∞—è+–ø–ª–æ—â–∞–¥—å', null, authHeaders);
    if (placesResponse.status === 200) {
      console.log('‚úÖ –ü–æ–∏—Å–∫ –º–µ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
      console.log('‚ö†Ô∏è –ü–æ–∏—Å–∫ –º–µ—Å—Ç:', placesResponse.body);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

testAPI();
