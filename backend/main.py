"""
Yanqwip Backend - FastAPI
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π backend –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è frontend
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional
import uvicorn

app = FastAPI(title="Yanqwip API", version="1.0.0")

# CORS –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Models
class User(BaseModel):
    id: str
    name: str
    email: str
    avatar: Optional[str] = None

class LoginRequest(BaseModel):
    email: str
    password: str

class RegisterRequest(BaseModel):
    name: str
    email: str
    password: str

class AuthResponse(BaseModel):
    accessToken: str
    refreshToken: str
    user: User

class WizardAnswer(BaseModel):
    questionId: str
    question: str
    answer: str
    type: str

class GenerateRouteRequest(BaseModel):
    answers: List[WizardAnswer]
    context: dict

class RouteStep(BaseModel):
    id: str
    title: str
    description: str
    address: str
    duration: int
    category: str

class Route(BaseModel):
    id: str
    title: str
    summary: str
    tags: List[str]
    steps: List[RouteStep]
    tips: List[str]
    totalDuration: int

class ChatMessage(BaseModel):
    message: str
    history: Optional[List[dict]] = []

# Mock database
MOCK_USER = User(
    id="user_123",
    name="–ú–∞–∫—Å–∏–º",
    email="maxim@example.com",
    avatar=None
)

MOCK_ROUTES = [
    Route(
        id="route_1",
        title="–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –≤–µ—á–µ—Ä –≤ –ú–æ—Å–∫–≤–µ",
        summary="–ò–¥–µ–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–≤–∏–¥–∞–Ω–∏—è —Å –ø–æ—Å–µ—â–µ–Ω–∏–µ–º –ª—É—á—à–∏—Ö –º–µ—Å—Ç –≥–æ—Ä–æ–¥–∞",
        tags=["—Ä–æ–º–∞–Ω—Ç–∏–∫–∞", "–≤–µ—á–µ—Ä", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã"],
        steps=[
            RouteStep(
                id="step_1",
                title="–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ",
                description="–ü—Ä–æ–≥—É–ª–∫–∞ –ø–æ –ø–∞—Ä–∫—É –Ω–∞ –∑–∞–∫–∞—Ç–µ",
                address="—É–ª. –ö—Ä—ã–º—Å–∫–∏–π –í–∞–ª, 9",
                duration=60,
                category="park"
            ),
            RouteStep(
                id="step_2",
                title="–†–µ—Å—Ç–æ—Ä–∞–Ω White Rabbit",
                description="–£–∂–∏–Ω —Å –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–º –≤–∏–¥–æ–º –Ω–∞ –≥–æ—Ä–æ–¥",
                address="–°–º–æ–ª–µ–Ω—Å–∫–∞—è –ø–ª–æ—â–∞–¥—å, 3",
                duration=120,
                category="restaurant"
            ),
            RouteStep(
                id="step_3",
                title="–ö—Ä—ã–º—Å–∫–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è",
                description="–í–µ—á–µ—Ä–Ω—è—è –ø—Ä–æ–≥—É–ª–∫–∞ –≤–¥–æ–ª—å —Ä–µ–∫–∏",
                address="–ö—Ä—ã–º—Å–∫–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è",
                duration=45,
                category="romantic"
            ),
        ],
        tips=[
            "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ —Å—Ç–æ–ª–∏–∫ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –∑–∞—Ä–∞–Ω–µ–µ",
            "–í–æ–∑—å–º–∏—Ç–µ —Å —Å–æ–±–æ–π —Ç—ë–ø–ª—É—é –æ–¥–µ–∂–¥—É –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–π –ø—Ä–æ–≥—É–ª–∫–∏",
            "–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è: 18:00-22:00"
        ],
        totalDuration=225
    )
]

MOCK_PLACES = [
    {
        "id": "place_1",
        "name": "–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ",
        "description": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫ –∫—É–ª—å—Ç—É—Ä—ã –∏ –æ—Ç–¥—ã—Ö–∞",
        "category": "park",
        "rating": 4.7,
        "price": "free",
        "image": "https://via.placeholder.com/300x200",
        "address": "—É–ª. –ö—Ä—ã–º—Å–∫–∏–π –í–∞–ª, 9",
        "isOpen": True,
        "isFavorite": False
    },
    {
        "id": "place_2",
        "name": "–ú—É–∑–µ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ –ì–∞—Ä–∞–∂",
        "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ –≤ –ü–∞—Ä–∫–µ –ì–æ—Ä—å–∫–æ–≥–æ",
        "category": "museum",
        "rating": 4.6,
        "price": "‚ÇΩ‚ÇΩ",
        "image": "https://via.placeholder.com/300x200",
        "address": "—É–ª. –ö—Ä—ã–º—Å–∫–∏–π –í–∞–ª, 9, —Å—Ç—Ä. 32",
        "isOpen": True,
        "isFavorite": False
    },
]

# Auth endpoints
@app.post("/auth/login", response_model=AuthResponse)
async def login(request: LoginRequest):
    """–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"""
    if request.email == "maxim@example.com" and request.password == "password":
        return AuthResponse(
            accessToken="mock_access_token_123",
            refreshToken="mock_refresh_token_456",
            user=MOCK_USER
        )
    raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

@app.post("/auth/register", response_model=AuthResponse)
async def register(request: RegisterRequest):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"""
    new_user = User(
        id="user_" + request.email,
        name=request.name,
        email=request.email
    )
    return AuthResponse(
        accessToken="mock_access_token_new",
        refreshToken="mock_refresh_token_new",
        user=new_user
    )

@app.post("/auth/refresh")
async def refresh_token():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
    return {
        "accessToken": "mock_access_token_refreshed",
        "refreshToken": "mock_refresh_token_refreshed"
    }

@app.get("/auth/me", response_model=User)
async def get_current_user():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return MOCK_USER

@app.put("/auth/me", response_model=User)
async def update_profile(user: User):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
    return user

# Routes endpoints
@app.post("/routes/generate", response_model=Route)
async def generate_route(request: GenerateRouteRequest):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä–∞"""
    
    # –°–∏–º—É–ª—è—Ü–∏—è –¥–æ–ª–≥–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç AI)
    import asyncio
    await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    # –ë–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤
    budget = next((a.answer for a in request.answers if a.questionId == "budget"), "any")
    categories = next((a.answer for a in request.answers if a.questionId == "categories"), "")
    duration = next((a.answer for a in request.answers if a.questionId == "duration"), "4-6")
    
    return Route(
        id="route_generated",
        title=f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç ({duration} —á–∞—Å–æ–≤)",
        summary=f"–ú–∞—Ä—à—Ä—É—Ç —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å —Å —É—á—ë—Ç–æ–º –±—é–¥–∂–µ—Ç–∞ '{budget}' –∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {categories}",
        tags=categories.split(", ") if categories else ["custom"],
        steps=[
            RouteStep(
                id="step_1",
                title="–ü–µ—Ä–≤–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞",
                description="–ù–∞—á–∞–ª–æ –≤–∞—à–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
                address="–ú–æ—Å–∫–≤–∞, —Ü–µ–Ω—Ç—Ä",
                duration=60,
                category=categories.split(", ")[0] if categories else "other"
            ),
            RouteStep(
                id="step_2",
                title="–í—Ç–æ—Ä–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞",
                description="–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞",
                address="–ú–æ—Å–∫–≤–∞, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä",
                duration=90,
                category=categories.split(", ")[1] if "," in categories else "other"
            ),
        ],
        tips=[
            "–ú–∞—Ä—à—Ä—É—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è",
            f"–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {duration} —á–∞—Å–æ–≤",
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—á–∞—Ç—å –≤ —Å–≤–µ—Ç–ª–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫"
        ],
        totalDuration=150
    )

@app.get("/routes/my", response_model=List[Route])
async def get_my_routes():
    """–ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ –º–∞—Ä—à—Ä—É—Ç—ã"""
    return MOCK_ROUTES

@app.get("/routes/public", response_model=List[Route])
async def get_public_routes():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã"""
    return MOCK_ROUTES

@app.get("/routes/{route_id}", response_model=Route)
async def get_route(route_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–æ ID"""
    route = next((r for r in MOCK_ROUTES if r.id == route_id), None)
    if not route:
        raise HTTPException(status_code=404, detail="–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return route

@app.post("/routes", response_model=Route)
async def save_route(route: Route):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç"""
    MOCK_ROUTES.append(route)
    return route

@app.delete("/routes/{route_id}")
async def delete_route(route_id: str):
    """–£–¥–∞–ª–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç"""
    global MOCK_ROUTES
    MOCK_ROUTES = [r for r in MOCK_ROUTES if r.id != route_id]
    return {"message": "–ú–∞—Ä—à—Ä—É—Ç —É–¥–∞–ª—ë–Ω"}

# Places endpoints
@app.get("/places")
async def get_places():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–µ—Å—Ç–∞"""
    return MOCK_PLACES

@app.get("/places/search")
async def search_places(q: str = ""):
    """–ü–æ–∏—Å–∫ –º–µ—Å—Ç"""
    if not q:
        return MOCK_PLACES
    return [p for p in MOCK_PLACES if q.lower() in p["name"].lower() or q.lower() in p["description"].lower()]

@app.post("/places/{place_id}/favorite")
async def toggle_favorite(place_id: str):
    """–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    place = next((p for p in MOCK_PLACES if p["id"] == place_id), None)
    if place:
        place["isFavorite"] = not place["isFavorite"]
        return place
    raise HTTPException(status_code=404, detail="–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

# Agent endpoints
@app.post("/agent/chat")
async def agent_chat(request: ChatMessage):
    """–ò–ò-–∞–≥–µ–Ω—Ç —á–∞—Ç (streaming –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ)"""
    
    # –ü—Ä–æ—Å—Ç–æ–π mock –æ—Ç–≤–µ—Ç
    responses = {
        "–∫–∞—Ñ–µ": "üè™ –†—è–¥–æ–º —Å –≤–∞–º–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–ª–∏—á–Ω—ã—Ö –∫–∞—Ñ–µ:\n\n1. **–ö–æ—Ñ–µ–º–∞–Ω–∏—è** - —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 12\n   ‚ÇΩ‚ÇΩ ‚Ä¢ –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –∫—É—Ö–Ω—è\n\n2. **Starbucks** - –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 1\n   ‚ÇΩ‚ÇΩ ‚Ä¢ –ö–æ—Ñ–µ –∏ –¥–µ—Å–µ—Ä—Ç—ã\n\n3. **–ü—É—à–∫–∏–Ω** - –¢–≤–µ—Ä—Å–∫–æ–π –±—É–ª—å–≤–∞—Ä, 26–ê\n   ‚ÇΩ‚ÇΩ‚ÇΩ ‚Ä¢ –†—É—Å—Å–∫–∞—è –∫—É—Ö–Ω—è",
        
        "—Ä–µ—Å—Ç–æ—Ä–∞–Ω": "üçΩÔ∏è –õ—É—á—à–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏:\n\n1. **White Rabbit** - –°–º–æ–ª–µ–Ω—Å–∫–∞—è –ø–ª., 3\n   ‚ÇΩ‚ÇΩ‚ÇΩ‚ÇΩ ‚Ä¢ –ü–∞–Ω–æ—Ä–∞–º–Ω—ã–π –≤–∏–¥\n\n2. **Twins Garden** - –°—Ç—Ä–∞—Å—Ç–Ω–æ–π –±—É–ª—å–≤–∞—Ä, 8–ê\n   ‚ÇΩ‚ÇΩ‚ÇΩ‚ÇΩ ‚Ä¢ –ê–≤—Ç–æ—Ä—Å–∫–∞—è –∫—É—Ö–Ω—è\n\n3. **–°–∞–≤–≤–∞** - –†–æ–∂–¥–µ—Å—Ç–≤–µ–Ω–∫–∞, 10\n   ‚ÇΩ‚ÇΩ‚ÇΩ ‚Ä¢ –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –∫—É—Ö–Ω—è",
        
        "–º–∞—Ä—à—Ä—É—Ç": "üó∫Ô∏è –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –º–∞—Å—Ç–µ—Ä–æ–º!\n\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ —è —Å–æ–∑–¥–∞–º –∏–¥–µ–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç' –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ üëÜ",
    }
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    message_lower = request.message.lower()
    for keyword, response in responses.items():
        if keyword in message_lower:
            return {"response": response}
    
    # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    return {
        "response": f"ü§ñ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å!\n\n–í—ã —Å–ø—Ä–æ—Å–∏–ª–∏: '{request.message}'\n\n–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:\n‚Ä¢ –ù–∞–π—Ç–∏ –∫–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã\n‚Ä¢ –ü–æ–¥–æ–±—Ä–∞—Ç—å –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç\n‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ú–æ—Å–∫–≤–µ\n\n–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    }

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç"""
    return {
        "message": "Yanqwip API v1.0",
        "status": "running",
        "docs": "/docs"
    }

if __name__ == "__main__":
    print("üöÄ Starting Yanqwip Backend...")
    print("üìù API Docs: http://localhost:8000/docs")
    print("üî• Server running on: http://localhost:8000")
    uvicorn.run(app, host="0.0.0.0", port=8000)
